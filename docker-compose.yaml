version: '3.4'

services:
  app1: &app
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
    hostname: app1
    #ports: # Conferindo o backend do host
    #  - "8080:8080"
    expose:
      - "8080"
    volumes:
      - ./backend/src:/app/src
    environment:
      DB_URL: "postgres://postgres:12345678@postgres:5432/postgres"
      DB_POOL: 35
      NODE_ENV: production
      PORT: 8080
      PINO_LOG_LEVEL: debug
      REQ_TIMEOUT: 2000
      CLUSTER: true
      CLUSTER_WORKERS: 5
    depends_on:
      postgres:
        condition: service_healthy
    ulimits:
      nproc: 1000000
      nofile:
        soft: 1000000
        hard: 1000000
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: '2GB'

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/app/src
    environment:
      - NODE_ENV=production
      - PORT=3000
    depends_on:
      app1:
        condition: service_started
      app2:
        condition: service_started
    ulimits:
      nproc: 1000000
      nofile:
        soft: 1000000
        hard: 1000000
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '0.6GB'
      

  app2:
    <<: *app
    hostname: app2

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      app1:
        condition: service_started
      app2:
        condition: service_started
      frontend:
        condition: service_started
#    depends_on:
#      - app1
#      - app2
    ports:
      - "9999:9999"

  postgres:
    image: postgres
    command: postgres -c 'max_connections=450' -c 'log_error_verbosity=terse'
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345678
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.4'
          memory: '1.5GB'
